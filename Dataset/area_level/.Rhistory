library(nycflights13)
library(modeest)
library(pastecs)
library(ggpubr)
library(car)
library(carData)
# Week 9 Lab Exercise
data<-read.csv("C:/Users/Pau Thing/Downloads/diamond.csv")
View(data)
data$depth = ifelse(is.na(data$depth),ave(data$depth, FUN = function(x) mean(x, na.rm = 'TRUE')),data$depth)
data$depth = as.numeric(format(round(data$depth, 1)))
data$x = ifelse(is.na(data$x),ave(data$x, FUN = function(x) mean(x, na.rm = 'TRUE')),data$x)
data$y = ifelse(is.na(data$y),ave(data$y, FUN = function(x) mean(x, na.rm = 'TRUE')),data$y)
data$z = ifelse(is.na(data$z),ave(data$z, FUN = function(x) mean(x, na.rm = 'TRUE')),data$z)
data$x = ifelse(is.na(data$x),ave(data$x, FUN = function(x) median(x, na.rm = 'TRUE')),data$x)
data$y = ifelse(is.na(data$y),ave(data$y, FUN = function(x) median(x, na.rm = 'TRUE')),data$y)
data$z = ifelse(is.na(data$z),ave(data$z, FUN = function(x) median(x, na.rm = 'TRUE')),data$z)
# Week 9 Lab Exercise
data<-read.csv("C:/Users/Pau Thing/Downloads/diamond.csv")
View(data)
data$x = ifelse(is.na(data$x),ave(data$x, FUN = function(x) median(x, na.rm = 'TRUE')),data$x)
data$y = ifelse(is.na(data$y),ave(data$y, FUN = function(x) median(x, na.rm = 'TRUE')),data$y)
data$z = ifelse(is.na(data$z),ave(data$z, FUN = function(x) median(x, na.rm = 'TRUE')),data$z)
data$depth = ifelse(is.na(data$depth),ave(data$depth, FUN = function(x) mean(x, na.rm = 'TRUE')),data$depth)
data$depth = as.numeric(format(round(data$depth, 1)))
data$x = ifelse(is.na(data$x),ave(data$x, FUN = function(x) median(x, na.rm = 'TRUE')),data$x)
# Week 9 Lab Exercise
data<-read.csv("C:/Users/Pau Thing/Downloads/diamond.csv")
View(data)
data$x = ifelse(is.na(data$x),ave(data$x, FUN = function(x) median(x, na.rm = 'TRUE')),data$x)
data$y = ifelse(is.na(data$y),ave(data$y, FUN = function(x) median(x, na.rm = 'TRUE')),data$y)
data$z = ifelse(is.na(data$z),ave(data$z, FUN = function(x) median(x, na.rm = 'TRUE')),data$z)
data$x = as.numeric(format(round(data$x, 1)))
data$y = as.numeric(format(round(data$y, 1)))
data$z = as.numeric(format(round(data$z, 1)))
data<-read.csv("C:/Users/Pau Thing/Downloads/BMI.csv")
data<-read.csv("C:/Users/Pau Thing/Downloads/BMI.csv")
View(data)
data$weight = ifelse(is.na(data$weight),ave(data$weight, FUN = function(x) mean(x, na.rm = 'TRUE')),data$weight)
data$age = ifelse(is.na(data$age),ave(data$age, FUN = function(x) median(x, na.rm = 'TRUE')),data$age)
data$height = ifelse(is.na(data$height),ave(data$height, FUN = function(x) mean(x, na.rm = 'TRUE')),data$height)
View(data)
data$weight = as.numeric(format(round(data$weight, 0)))
data$height = as.numeric(format(round(data$height, 1)))
data<-read.csv("C:/Users/Pau Thing/Downloads/BMI.csv")
View(data)
data$weight = ifelse(is.na(data$weight),ave(data$weight, FUN = function(x) mean(x, na.rm = 'TRUE')),data$weight)
data$age = ifelse(is.na(data$age),ave(data$age, FUN = function(x) median(x, na.rm = 'TRUE')),data$age)
data$height = ifelse(is.na(data$height),ave(data$height, FUN = function(x) mean(x, na.rm = 'TRUE')),data$height)
data$weight = as.numeric(format(round(data$weight, 0)))
data$height = as.numeric(format(round(data$height, 2)))
data<-read.csv("C:/Users/Pau Thing/Downloads/BMI.csv")
View(data)
data$weight = ifelse(is.na(data$weight),ave(data$weight, FUN = function(x) mean(x, na.rm = 'TRUE')),data$weight)
data$age = ifelse(is.na(data$age),ave(data$age, FUN = function(x) median(x, na.rm = 'TRUE')),data$age)
data$height = ifelse(is.na(data$height),ave(data$height, FUN = function(x) mean(x, na.rm = 'TRUE')),data$height)
data$weight = as.numeric(format(round(data$weight, 0)))
data$height = as.numeric(format(round(data$height, 2)))
data<-read.csv("C:/Users/Pau Thing/Downloads/BMI.csv")
View(data)
ggplot(data) + geom_histogram(mapping = aes(x = weight), binwidth = 0.8)
ggplot(data) + geom_histogram(mapping = aes(x = weight), binwidth = 1)
ggplot(data) + geom_histogram(mapping = aes(x = weight), binwidth = 0.5)
ggplot(data) + geom_histogram(mapping = aes(x = weight), binwidth = 0.6)
ggplot(data) + geom_histogram(mapping = aes(x = weight), binwidth = 0.5)
ggplot(data) + geom_histogram(mapping = aes(x = weight), binwidth = 0.6)
5
5
ggplot(data) + geom_histogram(mapping = aes(x = weight), binwidth = 0.5)
ggplot(data) + geom_histogram(mapping = aes(x = age), binwidth = 0.5)
ggplot(data) + geom_histogram(mapping = aes(x = height), binwidth = 0.5)
data$weight = ifelse(is.na(data$weight),ave(data$weight, FUN = function(x) median(x, na.rm = 'TRUE')),data$weight)
data$age = ifelse(is.na(data$age),ave(data$age, FUN = function(x) median(x, na.rm = 'TRUE')),data$age)
data$height = ifelse(is.na(data$height),ave(data$height, FUN = function(x) mean(x, na.rm = 'TRUE')),data$height)
ggplot(data) + geom_histogram(mapping = aes(x = weight), binwidth = 0.5)
ggplot(data) + geom_histogram(mapping = aes(x = age), binwidth = 0.5)
ggplot(data) + geom_histogram(mapping = aes(x = height), binwidth = 0.5)
ggplot(data) + geom_histogram(mapping = aes(x = weight), binwidth = 0.5)
ggplot(data) + geom_histogram(mapping = aes(x = age), binwidth = 0.5)
data<-read.csv("C:/Users/Pau Thing/Downloads/BMI.csv")
View(data)
data$weight = ifelse(is.na(data$weight),ave(data$weight, FUN = function(x) mean(x, na.rm = 'TRUE')),data$weight)
ggplot(data) + geom_histogram(mapping = aes(x = weight), binwidth = 0.5)
data<-read.csv("C:/Users/Pau Thing/Downloads/BMI.csv")
View(data)
ggplot(data) + geom_histogram(mapping = aes(x = weight), binwidth = 0.5)
ggplot(data) + geom_histogram(mapping = aes(x = age), binwidth = 0.5)
ggplot(data) + geom_histogram(mapping = aes(x = height), binwidth = 0.5)
data$weight = ifelse(is.na(data$weight),ave(data$weight, FUN = function(x) median(x, na.rm = 'TRUE')),data$weight)
data$age = ifelse(is.na(data$age),ave(data$age, FUN = function(x) median(x, na.rm = 'TRUE')),data$age)
data$height = ifelse(is.na(data$height),ave(data$height, FUN = function(x) mean(x, na.rm = 'TRUE')),data$height)
ggplot(data) + geom_histogram(mapping = aes(x = height), binwidth = 0.5)
ggplot(data) + geom_histogram(mapping = aes(x = age), binwidth = 0.5)
ggplot(data) + geom_histogram(mapping = aes(x = weight), binwidth = 0.5)
data$size = factor(data$size, levels = c("XXS", "S", "M", "L","XL" ,"XXXL"),labels = c(1,2,3,4,5,6))
set.seed(123)
split = sample.split(data, SplitRatio = 0.7)
install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(data, SplitRatio = 0.7)
training_set = subset(data, split == TRUE)
test_set = subset(data, split == FALSE)
training_set[,3:4] = scale(training_set[,3:4])
test_set[,3:4] = scale(test_set[,3:4])
set.seed(123)
split = sample.split(data, SplitRatio = 0.7)
set.seed(123)
split = sample.split(data, SplitRatio = 0.7)
training_set = subset(data, split == TRUE)
test_set = subset(data, split == FALSE)
View(data)
split = sample.split(data$weight, SplitRatio = 0.7)
training_set = subset(data, split == TRUE)
test_set = subset(data, split == FALSE)
split = sample.split(data, SplitRatio = 0.7)
training_set = subset(data, sample == TRUE)
test_set = subset(data, sample == FALSE)
library(RColorBrewer)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(nycflights13)
library(modeest)
library(pastecs)
library(ggpubr)
library(car)
library(carData)
library(RColorBrewer)
#Lab Assignment
#read the dataset
movie <- read.csv("movies.csv")
view(movie)
#first 10 lines of data
head(movie,10)
#summary of data
summary(movie)
#Visualize each of the attribute using histogram
ggplot(movie) + geom_histogram(mapping = aes(x = score), binwidth = 0.5)
#Visualize each of the attribute using histogram
ggplot(movie) + geom_histogram(mapping = aes(x = score), binwidth = 0.6)
#Visualize each of the attribute using histogram
ggplot(movie) + geom_histogram(mapping = aes(x = score), binwidth = 0.2)
hist(movie$score, main="Histogram with Score")`
hist(movie$score, main="Histogram with Score")
hist(movie$score, main="Histogram with Score")
#Visualize each of the attribute using histogram
ggplot(movie) + geom_histogram(mapping = aes(x = score), binwidth = 0.2)
hist(movie$score, main="Histogram with Score")
hist(movie$score, main="Histogram with Score")
hist(movie$budget, main="Histogram with Score")
histinfo = hist(movie$budget, main="Histogram with Score")
#Visualize each of the attribute using histogram
ggplot(movie) + geom_histogram(mapping = aes(x = budget), binwidth = 0.2)
#Visualize each of the attribute using histogram
ggplot(movie) + geom_histogram(mapping = aes(x = votes), binwidth = 0.2)
#Visualize each of the attribute using histogram
ggplot(movie) + geom_histogram(mapping = aes(x = votes), binwidth = 0.6)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(nycflights13)
library(modeest)
library(pastecs)
library(ggpubr)
library(car)
library(carData)
library(RColorBrewer)
#Visualize each of the attribute using histogram
ggplot(movie) + geom_histogram(mapping = aes(x = score), binwidth = 0.2)
view(movie)
#first 10 lines of data
head(movie,10)
#summary of data
summary(movie)
#Visualize each of the attribute using histogram
ggplot(movie) + geom_histogram(mapping = aes(x = score), binwidth = 0.2)
#summary of data
summary(movie)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(nycflights13)
library(modeest)
library(pastecs)
library(ggpubr)
library(car)
library(carData)
library(RColorBrewer)
#Lab Assignment
#read the dataset
movie <- read.csv("movies.csv")
view(movie)
#first 10 lines of data
head(movie,10)
#summary of data
summary(movie)
#Visualize each of the attribute using histogram
ggplot(movie, aes(x = score)) + geom_histogram(na.rm = TRUE, binwidth = 0.1, colour = "black", fill = "grey")
ggplot(movie, aes(x = budget)) + geom_histogram(na.rm = TRUE, colour = "black", fill = "grey")
ggplot(movie, aes(x = votes)) + geom_histogram(na.rm = TRUE, binwidth = 0.1, colour = "black", fill = "grey")
ggplot(movie, aes(x = votes)) + geom_histogram(na.rm = TRUE, colour = "black", fill = "grey")
ggplot(movie, aes(x = gross)) + geom_histogram(na.rm = TRUE, binwidth = 0.1, colour = "black", fill = "grey")
ggplot(movie, aes(x = runtime)) + geom_histogram(na.rm = TRUE, binwidth = 0.1, colour = "black", fill = "grey")
ggplot(movie, aes(x = votes)) + geom_histogram(na.rm = TRUE, colour = "black", fill = "grey")
ggplot(movie, aes(x = runtime)) + geom_histogram(na.rm = TRUE, colour = "black", fill = "grey")
#Visualize each of the attribute using histogram
ggplot(movie, aes(x = score)) + geom_histogram(na.rm = TRUE, binwidth = 0.1, colour = "black", fill = "pink")
grey
#Visualize each of the attribute using histogram
ggplot(movie, aes(x = score)) + geom_histogram(na.rm = TRUE, binwidth = 0.05, colour = "black", fill = "grey")
#Visualize each of the attribute using histogram
ggplot(movie, aes(x = score)) + geom_histogram(na.rm = TRUE, binwidth = 0.1, colour = "black", fill = "grey")
#Visualize each of the attribute using histogram
ggplot(movie, aes(x = score)) + geom_histogram(na.rm = TRUE, binwidth = 0.08, colour = "black", fill = "grey")
#Visualize each of the attribute using histogram
ggplot(movie, aes(x = score)) + geom_histogram(na.rm = TRUE, binwidth = 0.1, colour = "black", fill = "grey")
#Visualize each of the attribute using histogram
ggplot(movie, aes(x = score)) + geom_histogram(na.rm = TRUE, binwidth = 0.1, colour = "black", fill = "grey")
ggplot(movie, aes(x = budget)) + geom_histogram(na.rm = TRUE, colour = "black", fill = "grey")
ggplot(movie, aes(x = votes)) + geom_histogram(na.rm = TRUE, colour = "black", fill = "grey")
ggplot(movie, aes(x = gross)) + geom_histogram(na.rm = TRUE, colour = "black", fill = "grey")
ggplot(movie, aes(x = runtime)) + geom_histogram(na.rm = TRUE, colour = "black", fill = "grey")
#Fill in missing value into dataset
movie$score = ifelse(is.na(movie$score),ave(movie$score, FUN = function(x) median(x, na.rm = 'TRUE')),movie$score)
movie$budget = ifelse(is.na(movie$budget),ave(movie$budget, FUN = function(x) median(x, na.rm = 'TRUE')),movie$budget)
view(movie)
movie$votes = ifelse(is.na(movie$votes),ave(movie$votes, FUN = function(x) median(x, na.rm = 'TRUE')),movie$votes)
movie$gross = ifelse(is.na(movie$gross),ave(movie$gross, FUN = function(x) median(x, na.rm = 'TRUE')),movie$gross)
view(movie)
movie$runtime = ifelse(is.na(movie$runtime),ave(movie$runtime, FUN = function(x) median(x, na.rm = 'TRUE')),movie$runtime)
#Compute the descriptive statistics for the score and budget
#Score
# Compute the minimum value
min(movie$score)
mean(movie$score)
median(movie$score)
sd(movie$score)
#Budget
min(movie$budget)
mean(movie$budget)
median(movie$budget)
sd(movie$budget)
view(movie)
#Print the name and genre of movies which score is higher than mean score
mScore <- mean(movie$score)
if(movie$score > mScore)
{
print(movie$name)
print(movie$genre)
}
#Visualize the genre and runtime using stripchart
#Create a list
comp <- list(x = movie$genre,y = movie$runtime)
stripchart(comp, main = "Genre & Runtime", xlab = "Genre", ylab = "Runtime")
stripchart(comp, main = "Genre & Runtime", xlab = "Genre", ylab = "Runtime", pch = 1)
stripchart(movie$runtime ~ genre, main = "Genre & Runtime", xlab = "Genre", ylab = "Runtime", pch = 1)
stripchart(movie$runtime ~ movie$genre, main = "Genre & Runtime", xlab = "Genre", ylab = "Runtime", pch = 1)
stripchart(movie$genre ~ movie$runtime, main = "Genre & Runtime", xlab = "Genre", ylab = "Runtime", pch = 1)
stripchart(movie$genre ~ movie$runtime, main = "Genre & Runtime", xlab = "Genre", ylab = "Runtime", vertical = TRUE,  pch = 1)
stripchart(movie$runtime ~ movie$genre, xlab = "Genre", ylab = "Runtime", method = 'jitter', pch = 1)
stripchart(movie$runtime ~ movie$genre, xlab = "Genre", ylab = "Runtime", method = 'jitter', pch = 5)
stripchart(movie$runtime ~ movie$genre, xlab = "Genre", ylab = "Runtime", method = 'jitter', pch = 2)
stripchart(movie$runtime ~ movie$genre, xlab = "Genre", ylab = "Runtime", method = 'jitter', pch = 3)
stripchart(movie$runtime ~ movie$genre, xlab = "Genre", ylab = "Runtime", pch = 3)
stripchart(movie$runtime ~ movie$genre, xlab = "Genre", ylab = "Runtime", pch = 4)
stripchart(movie$runtime ~ movie$genre, xlab = "Genre", ylab = "Runtime", pch = 2)
stripchart(movie$runtime ~ movie$genre, xlab = "Runtime", ylab = "Genre", pch = 2)
stripchart(movie$runtime ~ movie$genre, xlab = "Runtime", ylab = "Genre", vertical = TRUE, pch = 2)
stripchart(movie$runtime ~ movie$genre, xlab = "Runtime", ylab = "Genre", method = 'jitter', vertical = TRUE, pch = 2)
stripchart(movie$runtime ~ movie$genre, xlab = "Runtime", ylab = "Genre", method = 'jitter', jitter = 0.5, vertical = TRUE, pch = 2)
stripchart(movie$runtime ~ movie$genre, xlab = "Runtime", ylab = "Genre", method = 'jitter', jitter = 1, vertical = TRUE, pch = 2)
stripchart(movie$runtime ~ movie$genre, xlab = "Runtime", ylab = "Genre", method = 'jitter', jitter = 0.2, vertical = TRUE, pch = 2)
stripchart(movie$runtime ~ movie$genre, xlab = "Runtime", ylab = "Genre", method = 'jitter', jitter = 0.1, vertical = TRUE, pch = 2)
stripchart(movie$runtime ~ movie$genre, xlab = "Runtime", ylab = "Genre", method = 'stack', vertical = TRUE, pch = 2)
jitter
stripchart(movie$runtime ~ movie$genre, xlab = "Runtime", ylab = "Genre", method = 'jitter', vertical = TRUE, pch = 2)
stripchart(movie$runtime ~ movie$genre, xlab = "Runtime", ylab = "Genre", method = 'overplot', vertical = TRUE, pch = 2)
stripchart(movie$runtime ~ movie$genre, xlab = "Runtime", ylab = "Genre", method = 'overplot', vertical = TRUE, pch = 1)
stripchart(movie$runtime ~ movie$genre, xlab = "Runtime", ylab = "Genre",  vertical = TRUE, pch = 1)
stripchart(movie$runtime ~ movie$genre, xlab = "Runtime", ylab = "Genre", vertical = TRUE, pch = 1)
stripchart(movie$runtime ~ movie$genre, xlab = "Runtime", ylab = "Genre", vertical = TRUE, pch = 1)
#Print the name and genre of movies which score is higher than mean score
mScore <- mean(movie$score)
subset(movie, score > mscore, select=c("name", "genre"))
subset(movie, score > mScore, select = c("name", "genre"))
stripchart(movie$runtime ~ movie$genre, xlab = "Genre", ylab = "Runtime", vertical = TRUE, pch = 1)
#Print the name and genre of movies which score is higher than mean score
mScore <- mean(movie$score)
subset(movie, score > mScore, select = c("name", "genre"))
#Visualize the genre and runtime using stripchart
stripchart(movie$runtime ~ movie$genre, xlab = "Genre", ylab = "Runtime", vertical = TRUE, pch = 1)
#Visualize the genre and runtime using stripchart
stripchart(movie$runtime ~ movie$genre, main = "Hi", xlab = "Genre", ylab = "Runtime", vertical = TRUE, pch = 1)
#Visualize the genre and runtime using stripchart
stripchart(movie$runtime ~ movie$genre, main = "Runtime in Genres", xlab = "Genre", ylab = "Runtime", vertical = TRUE, pch = 1)
#Visualize the genre and runtime using stripchart
stripchart(movie$runtime ~ movie$genre, main = "Runtimes in Different Genres", xlab = "Genre", ylab = "Runtime", vertical = TRUE, pch = 1)
#Visualize the genre and runtime using stripchart
stripchart(movie$runtime ~ movie$genre, main = "Runtimes in Different Genres", xlab = "Genre", ylab = "Runtime", vertical = TRUE, col = orange, pch = 1)
#Visualize the genre and runtime using stripchart
stripchart(movie$runtime ~ movie$genre, main = "Runtimes in Different Genres", xlab = "Genre", ylab = "Runtime", vertical = TRUE, col = c(orange), pch = 1)
#Visualize the genre and runtime using stripchart
stripchart(movie$runtime ~ movie$genre, main = "Runtimes in Different Genres", xlab = "Genre", ylab = "Runtime", vertical = TRUE, col = "orange", pch = 1)
#Visualize the genre and runtime using stripchart
stripchart(movie$runtime ~ movie$genre, main = "Runtimes in Different Genres", xlab = "Genre", ylab = "Runtime", vertical = TRUE, col = 'orange', pch = 1)
#Visualize the genre and runtime using stripchart
stripchart(movie$runtime ~ movie$genre, main = "Runtimes in Different Genres", xlab = "Genre", ylab = "Runtime", vertical = TRUE, col = 'blue', pch = 1)
#Convert the genre data to numerical
genreN <- as.numeric(factor(movie$genre))
genreN
view(movie)
view(movie)
#Convert the genre data to numerical
genreN <- as.integer(factor(movie$genre))
view(movie)
#Convert the genre data to numerical
genreN = as.numeric(factor(movie$genre))
view(movie)
#Convert the genre data to numerical
movie$genre = as.numeric(factor(movie$genre))
view(movie)
#Calculate the correlation between the numerical data in dataset
genR <- cor.test(movie$genre, movie$runtime, method = "pearson")
genR
#Lab Assignment
#Read the dataset
movie <- read.csv("C:/Users/Pau Thing/Downloads/movies.csv")
view(movie)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(ggpubr)
view(movie)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(ggpubr)
#Lab Assignment
#Read the dataset
movie <- read.csv("C:/Users/Pau Thing/Downloads/movies.csv")
view(movie)
#Question 1 - First 10 lines of data
head(movie,10)
#Question 2- Summary of data
summary(movie)
#Question 3 - Visualize each of the attribute using histogram
ggplot(movie, mapping = aes(x = score)) + geom_histogram(na.rm = TRUE, bins = 30, colour = "black", fill = "grey")
ggplot(movie, mapping = aes(x = budget)) + geom_histogram(na.rm = TRUE, bins = 30, colour = "black", fill = "grey")
ggplot(movie, mapping = aes(x = votes)) + geom_histogram(na.rm = TRUE, bins = 30, colour = "black", fill = "grey")
ggplot(movie, mapping = aes(x = gross)) + geom_histogram(na.rm = TRUE, bins = 30, colour = "black", fill = "grey")
ggplot(movie, mapping = aes(x = runtime)) + geom_histogram(na.rm = TRUE, bins = 30, colour = "black", fill = "grey")
#Fill in missing value into dataset
movie$score = ifelse(is.na(movie$score),ave(movie$score, FUN = function(x) median(x, na.rm = 'TRUE')),movie$score)
movie$budget = ifelse(is.na(movie$budget),ave(movie$budget, FUN = function(x) median(x, na.rm = 'TRUE')),movie$budget)
movie$votes = ifelse(is.na(movie$votes),ave(movie$votes, FUN = function(x) median(x, na.rm = 'TRUE')),movie$votes)
movie$gross = ifelse(is.na(movie$gross),ave(movie$gross, FUN = function(x) median(x, na.rm = 'TRUE')),movie$gross)
movie$runtime = ifelse(is.na(movie$runtime),ave(movie$runtime, FUN = function(x) median(x, na.rm = 'TRUE')),movie$runtime)
#Question 4 - Compute the descriptive statistics for the score and budget
#Score
# Compute the minimum value
min(movie$score)
mean(movie$score)
median(movie$score)
sd(movie$score)
#Budget
min(movie$budget)
mean(movie$budget)
median(movie$budget)
sd(movie$budget)
#Question 5 - Print the name and genre of movies which score is higher than mean score
mScore <- mean(movie$score)
subset(movie, score > mScore, select = c("name", "genre"))
#Question 6 - Visualize the genre and runtime using stripchart
#Answer:Genre with highest runtime is Drama
stripchart(movie$runtime ~ movie$genre, main = "Runtimes in Different Genres", xlab = "Genre", ylab = "Runtime", vertical = TRUE, col = 'blue', pch = 1)
#Question 7 - Convert the genre data to numerical
movie$genre = as.numeric(factor(movie$genre))
#Question 8 - Calculate the correlation between the numerical data in dataset
corArr <- c(cor(movie$genre, movie$year),
cor(movie$genre, movie$score),
cor(movie$genre, movie$votes),
cor(movie$genre, movie$budget),
cor(movie$genre, movie$gross),
cor(movie$genre, movie$runtime),
cor(movie$year, movie$score),
cor(movie$year, movie$votes),
cor(movie$year, movie$budget),
cor(movie$year, movie$gross),
cor(movie$year, movie$runtime),
cor(movie$score, movie$votes),
cor(movie$score, movie$budget),
cor(movie$score, movie$gross),
cor(movie$score, movie$runtime),
cor(movie$votes, movie$budget),
cor(movie$votes, movie$gross),
cor(movie$votes, movie$runtime),
cor(movie$budget, movie$gross),
cor(movie$budget, movie$runtime),
cor(movie$gross, movie$runtime))
corArr
max(corArr)
#Answer:Pair of budget and gross
#Answer:Pair of budget and gross
library(dplyr)
library(ggplot2)
library(tidyverse)
library(ggpubr)
#Lab Assignment
#Read the dataset
movie <- read.csv("C:/Users/Pau Thing/Downloads/movies.csv")
view(movie)
#Question 1 - First 10 lines of data
head(movie,10)
#Question 2- Summary of data
summary(movie)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(ggpubr)
#Lab Assignment
#Read the dataset
movie <- read.csv("C:/Users/Pau Thing/Downloads/movies.csv")
view(movie)
#Question 1 - First 10 lines of data
head(movie,10)
#Question 2- Summary of data
summary(movie)
#Question 3 - Visualize each of the attribute using histogram
ggplot(movie, mapping = aes(x = score)) + geom_histogram(na.rm = TRUE, bins = 30, colour = "black", fill = "grey")
ggplot(movie, mapping = aes(x = budget)) + geom_histogram(na.rm = TRUE, bins = 30, colour = "black", fill = "grey")
ggplot(movie, mapping = aes(x = votes)) + geom_histogram(na.rm = TRUE, bins = 30, colour = "black", fill = "grey")
ggplot(movie, mapping = aes(x = gross)) + geom_histogram(na.rm = TRUE, bins = 30, colour = "black", fill = "grey")
ggplot(movie, mapping = aes(x = runtime)) + geom_histogram(na.rm = TRUE, bins = 30, colour = "black", fill = "grey")
#Fill in missing value into dataset
movie$score = ifelse(is.na(movie$score),ave(movie$score, FUN = function(x) median(x, na.rm = 'TRUE')),movie$score)
movie$budget = ifelse(is.na(movie$budget),ave(movie$budget, FUN = function(x) median(x, na.rm = 'TRUE')),movie$budget)
movie$votes = ifelse(is.na(movie$votes),ave(movie$votes, FUN = function(x) median(x, na.rm = 'TRUE')),movie$votes)
movie$gross = ifelse(is.na(movie$gross),ave(movie$gross, FUN = function(x) median(x, na.rm = 'TRUE')),movie$gross)
movie$runtime = ifelse(is.na(movie$runtime),ave(movie$runtime, FUN = function(x) median(x, na.rm = 'TRUE')),movie$runtime)
#Question 4 - Compute the descriptive statistics for the score and budget
#Score
# Compute the minimum value
min(movie$score)
mean(movie$score)
median(movie$score)
sd(movie$score)
#Budget
min(movie$budget)
mean(movie$budget)
median(movie$budget)
sd(movie$budget)
#Question 5 - Print the name and genre of movies which score is higher than mean score
mScore <- mean(movie$score)
subset(movie, score > mScore, select = c("name", "genre"))
#Question 6 - Visualize the genre and runtime using stripchart
#Answer:Genre with highest runtime is Drama
stripchart(movie$runtime ~ movie$genre, main = "Runtimes in Different Genres", xlab = "Genre", ylab = "Runtime", vertical = TRUE, col = 'blue', pch = 1)
#Question 7 - Convert the genre data to numerical
movie$genre = as.numeric(factor(movie$genre))
#Question 8 - Calculate the correlation between the numerical data in dataset
corArr <- c(cor(movie$genre, movie$year),
cor(movie$genre, movie$score),
cor(movie$genre, movie$votes),
cor(movie$genre, movie$budget),
cor(movie$genre, movie$gross),
cor(movie$genre, movie$runtime),
cor(movie$year, movie$score),
cor(movie$year, movie$votes),
cor(movie$year, movie$budget),
cor(movie$year, movie$gross),
cor(movie$year, movie$runtime),
cor(movie$score, movie$votes),
cor(movie$score, movie$budget),
cor(movie$score, movie$gross),
cor(movie$score, movie$runtime),
cor(movie$votes, movie$budget),
cor(movie$votes, movie$gross),
cor(movie$votes, movie$runtime),
cor(movie$budget, movie$gross),
cor(movie$budget, movie$runtime),
cor(movie$gross, movie$runtime))
corArr
max(corArr)
#Answer:Pair of budget and gross
#Answer:Pair of budget and gross
#Answer:Pair of budget and gross
#Answer:Pair of budget and gross
#Answer:Pair of budget and gross
#Answer:Pair of budget and gross
ggplot(data = company) + geom_point(mapping = aes(x = position, y = salary, color=location))
library(dplyr)
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(microbenchmark)
library(parallel)
#Change directory
setwd("~/INTI College Penang - BCS/Semester 3_Aug 2022/5011CEM Big Data Programming Project/Assignment/BigDataProgramming/Dataset/area_level")
#Import the dataset
list_csv_files <- list.files(path = ".")
AL_Grocery = do.call(rbind, lapply(list_csv_files, function(x) read.csv(x, stringsAsFactors = FALSE)))
AL_Grocery
mbm <- microbenchmark("Sequential " = {do.call(rbind, lapply(list_csv_files, function(x) read.csv(x, stringsAsFactors = FALSE)))})
mbm
autoplot(mbm)
#Parallel
#Whole area level
numCores <- detectCores()
numCores
cl <- makeCluster(numCores)
clusterEvalQ(cl, 2 + 2)
